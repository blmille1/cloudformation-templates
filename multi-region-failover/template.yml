---
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Sample multi-region failover example using Global DynamoDB specification 2019

Parameters:
  OriginalPrimaryRegion:
    Description: The original primary region in which we intend to operate
    Type: String
    Default: us-east-1
  Tags:
    Description: Tags that should be applied to Resources
    Type: CommaDelimitedList
    Default: ''

Conditions:
  IsOriginalPrimary: !Equals [ !Ref OriginalPrimaryRegion, !Ref "AWS::Region"]

Globals:
  Function:
    Runtime: nodejs12.x
    MemorySize: 512
    Timeout: 60
    Handler: app.handler
    Environment:
      Variables:
        AWS: true
        REGION_STATUS: !If [ IsOriginalPrimary, active, inactive ] # Use this to determine if you're in an active region or not. In this implementation, there is only ever one active region.
                                                                   # When the dynamodb table gets updated, this value gets changed by processConfigChangeFunc.
    Layers:
      - !Ref utilsLayer
Resources:
  ###########################################################################

  utilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
        LayerName: utils
        Description: Common code
        ContentUri: layers/utils/
        CompatibleRuntimes:
          - nodejs12.x

  ###########################################################################

  cfnGlobalDynamodbManager:
    Type: Custom::CfnGlobalDynamodbManager
    Properties:
      ServiceToken: !GetAtt cfnGlobalDynamodbManagerFunc.Arn
      TableName: !Sub ${AWS::StackName}-config # Never change this value once a stack is deployed.  The Custom Resource cannot handle table name changes.
      OriginalPrimaryRegion: !Ref OriginalPrimaryRegion # Never change this value once it has been deployed.
      Tags: !Ref Tags # These values may change
  
  cfnGlobalDynamodbManagerFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambdas/cfnGlobalDynamodbManager/
      Role: !GetAtt cfnGlobalDynamodbManagerFuncRole.Arn
      Description: Custom Resource lambda function to process management events of global dynamodb tables and streams
      Timeout: 900

  cfnGlobalDynamodbManagerFuncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${cfnGlobalDynamodbManagerFunc}
      RetentionInDays: 365
  
  cfnGlobalDynamodbManagerFuncRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "IAM role should not allow * resource on its permissions policy"
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
         PolicyName: cfnGlobalDynamodbManagerPolicy
         PolicyDocument:
           Version: 2012-10-17
           Statement:
              - Effect: Allow
                Action: logs:DescribeLogStreams
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action: 
                 - dynamodb:DescribeStreams
                 - dynamodb:DescribeStream
                 - dynamodb:GetRecords
                 - dynamodb:GetShardIterator
                 - dynamodb:ListStreams
                 - dynamodb:UpdateTable
                 - dynamodb:CreateTable
                 - dynamodb:DeleteTable
                 - dynamodb:ListTagsOfResource
                 - dynamodb:TagResource
                 - dynamodb:UntagResource
                 - dynamodb:DescribeTable
                 - dynamodb:CreateTableReplica
                 - dynamodb:DeleteTableReplica
                 - dynamodb:Scan
                 - dynamodb:Query
                 - dynamodb:UpdateItem
                 - dynamodb:PutItem
                 - dynamodb:GetItem
                 - dynamodb:DeleteItem
                 - dynamodb:BatchWriteItem
                Resource: '*'

  ###########################################################################

  processConfigChangeRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "IAM role should not allow * resource on its permissions policy"
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
         PolicyName: processConfigChangePolicy
         PolicyDocument:
           Version: 2012-10-17
           Statement:
              - Effect: Allow
                Action: logs:DescribeLogStreams
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action: 
                 - dynamodb:DescribeStreams
                 - dynamodb:DescribeStream
                 - dynamodb:GetRecords
                 - dynamodb:GetShardIterator
                 - dynamodb:ListStreams
                Resource: !GetAtt cfnGlobalDynamodbManager.TableStreamArn
              - Effect: Allow
                Action:
                  - cloudformation:ListStackResources
                Resource: !Ref AWS::StackId
              - Effect: Allow
                Action:
                  - lambda:GetFunctionConfiguration
                  - lambda:UpdateFunctionConfiguration
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
            
  processConfigChangeFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/processConfigChange/
      Handler: app.handler
      Runtime: nodejs12.x
      Role: !GetAtt processConfigChangeRole.Arn
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackId
      Events:
        DDBStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt cfnGlobalDynamodbManager.TableStreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            Enabled: true

  processConfigChangeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${processConfigChangeFunc}
      RetentionInDays: 30

Outputs:
  ConfigTableArn:
    Value: !GetAtt cfnGlobalDynamodbManager.TableArn
  ConfigTableStreamArn:
    Value: !GetAtt cfnGlobalDynamodbManager.TableStreamArn